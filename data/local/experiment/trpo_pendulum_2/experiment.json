{
  "_snapshotter": {
    "_snapshot_dir": "d:\\Github\\DRSOM-for-RL\\data/local/experiment/trpo_pendulum_2",
    "_snapshot_mode": "last",
    "_snapshot_gap": 1,
    "$type": "garage.experiment.snapshotter.Snapshotter"
  },
  "_has_setup": true,
  "_plot": false,
  "_seed": 1,
  "_train_args": {
    "n_epochs": 5000,
    "batch_size": 1024,
    "plot": false,
    "store_episodes": false,
    "pause_for_plot": false,
    "start_epoch": 0,
    "$type": "garage.trainer.TrainArgs"
  },
  "_stats": {
    "total_epoch": 0,
    "total_itr": 0,
    "total_env_steps": 0,
    "last_episode": "None",
    "$type": "garage.trainer.ExperimentStats"
  },
  "_algo": {
    "_discount": 0.99,
    "policy": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 3.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 3.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_action_dim": 1.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 200,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685540",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685B40",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "_obs_dim": 3.0,
      "_action_dim": 1.0,
      "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
    },
    "max_episode_length": 200,
    "_value_function": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "module": {
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 3.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 3.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_action_dim": 1,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": "None",
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": "None",
          "_max_std_param": "None",
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
        }
      },
      "_mdp_spec": {
        "max_episode_length": 200,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685540",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685B40",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "name": "GaussianMLPValueFunction",
      "$type": "garage.torch.value_functions.gaussian_mlp_value_function.GaussianMLPValueFunction"
    },
    "_gae_lambda": 0.98,
    "_center_adv": false,
    "_positive_adv": false,
    "_policy_ent_coeff": 0.0,
    "_use_softplus_entropy": false,
    "_stop_entropy_gradient": false,
    "_entropy_method": "no_entropy",
    "_n_samples": 1,
    "_env_spec": {
      "max_episode_length": 200,
      "input_space": {
        "dtype": "dtype('float32')",
        "shape": [
          1
        ],
        "low": "array([-2.], dtype=float32)",
        "high": "array([2.], dtype=float32)",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "np_random": "RandomState(MT19937) at 0x1D69B685540",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "shape": [
          3
        ],
        "low": "array([-1., -1., -8.], dtype=float32)",
        "high": "array([1., 1., 8.], dtype=float32)",
        "bounded_below": "array([ True,  True,  True])",
        "bounded_above": "array([ True,  True,  True])",
        "np_random": "RandomState(MT19937) at 0x1D69B685B40",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_maximum_entropy": false,
    "_entropy_regularzied": false,
    "_episode_reward_mean": [],
    "_sampler": {
      "_factory": {
        "n_workers": 8,
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_class": {
          "$typename": "garage.sampler.default_worker.DefaultWorker"
        },
        "_worker_args": {},
        "$type": "garage.sampler.worker_factory.WorkerFactory"
      },
      "_agents": [
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        }
      ],
      "_envs": [
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814040",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814140",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B814240",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814040",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814140",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814540",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814640",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814640",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814340",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B814740",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814340",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814A40",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814B40",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814A40",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814940",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814840",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B814C40",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814940",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814840",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814E40",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814D40",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7FC240",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814E40",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814D40",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7FC740",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7FCC40",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7EC240",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7EC740",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        }
      ],
      "_workers": [
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 0,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814040",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814140",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B814240",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814040",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814140",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814540",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814640",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814640",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 1,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814440",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814340",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B814740",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814340",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814A40",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814B40",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814A40",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 2,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814940",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814840",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B814C40",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814940",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814840",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 3,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814E40",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B814D40",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B7FC240",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814E40",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814D40",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 4,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B7FC740",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 5,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B7FCC40",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 6,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B7EC240",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        },
        {
          "_seed": "None",
          "_max_episode_length": 200,
          "_worker_number": 7,
          "agent": {
            "training": true,
            "_parameters": {},
            "_buffers": {},
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_module": {
                "training": true,
                "_parameters": {
                  "_init_std": {
                    "$type": "torch.nn.parameter.Parameter"
                  }
                },
                "_buffers": {
                  "min_std_param": {
                    "$type": "torch.Tensor"
                  }
                },
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_mean_module": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 3.0,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          },
                          "1": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 32,
                                "$type": "torch.nn.modules.linear.Linear"
                              },
                              "non_linearity": {
                                "training": true,
                                "_parameters": {},
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                                "$type": "garage.torch._functions.NonLinearity"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      },
                      "_output_layers": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "0": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {
                              "linear": {
                                "training": true,
                                "_parameters": {
                                  "weight": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  },
                                  "bias": {
                                    "$type": "torch.nn.parameter.Parameter"
                                  }
                                },
                                "_buffers": {},
                                "_non_persistent_buffers_set": [],
                                "_backward_hooks": {},
                                "_forward_hooks": {},
                                "_forward_pre_hooks": {},
                                "_state_dict_hooks": {},
                                "_load_state_dict_pre_hooks": {},
                                "_modules": {},
                                "in_features": 32,
                                "out_features": 1.0,
                                "$type": "torch.nn.modules.linear.Linear"
                              }
                            },
                            "$type": "torch.nn.modules.container.Sequential"
                          }
                        },
                        "$type": "torch.nn.modules.container.ModuleList"
                      }
                    },
                    "_output_dim": 1.0,
                    "$type": "garage.torch.modules.mlp_module.MLPModule"
                  }
                },
                "_input_dim": 3.0,
                "_hidden_sizes": [
                  32,
                  32
                ],
                "_action_dim": 1.0,
                "_learn_std": true,
                "_std_hidden_sizes": [
                  32,
                  32
                ],
                "_min_std": 1e-06,
                "_max_std": "None",
                "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_std_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_std_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_std_output_nonlinearity": "None",
                "_std_output_w_init": {
                  "$type": "builtins.function"
                },
                "_std_parameterization": "exp",
                "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                "_hidden_w_init": {
                  "$type": "builtins.function"
                },
                "_hidden_b_init": {
                  "$type": "builtins.function"
                },
                "_output_nonlinearity": "None",
                "_output_w_init": {
                  "$type": "builtins.function"
                },
                "_output_b_init": {
                  "$type": "builtins.function"
                },
                "_layer_normalization": false,
                "_norm_dist_class": {
                  "$typename": "torch.distributions.normal.Normal"
                },
                "_min_std_param": {
                  "$type": "torch.Tensor"
                },
                "_max_std_param": "None",
                "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
              }
            },
            "_env_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685540",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B685B40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_name": "GaussianMLPPolicy",
            "_obs_dim": 3.0,
            "_action_dim": 1.0,
            "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
          },
          "env": {
            "_env": {
              "env": {
                "max_speed": 8,
                "max_torque": 2.0,
                "dt": 0.05,
                "g": 10.0,
                "m": 1.0,
                "l": 1.0,
                "viewer": "None",
                "action_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    1
                  ],
                  "low": "array([-2.], dtype=float32)",
                  "high": "array([2.], dtype=float32)",
                  "bounded_below": "array([ True])",
                  "bounded_above": "array([ True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
                  "$type": "gym.spaces.box.Box"
                },
                "observation_space": {
                  "dtype": "dtype('float32')",
                  "shape": [
                    3
                  ],
                  "low": "array([-1., -1., -8.], dtype=float32)",
                  "high": "array([1., 1., 8.], dtype=float32)",
                  "bounded_below": "array([ True,  True,  True])",
                  "bounded_above": "array([ True,  True,  True])",
                  "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
                  "$type": "gym.spaces.box.Box"
                },
                "np_random": "RandomState(MT19937) at 0x1D69B7EC740",
                "spec": {
                  "id": "Pendulum-v0",
                  "entry_point": "gym.envs.classic_control:PendulumEnv",
                  "reward_threshold": "None",
                  "nondeterministic": false,
                  "max_episode_steps": 200,
                  "_kwargs": {},
                  "_env_name": "Pendulum",
                  "$type": "gym.envs.registration.EnvSpec"
                },
                "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
              },
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
                "$type": "gym.spaces.box.Box"
              },
              "reward_range": [
                -Infinity,
                Infinity
              ],
              "metadata": {
                "render.modes": [
                  "human",
                  "rgb_array"
                ],
                "video.frames_per_second": 30
              },
              "_max_episode_steps": 200,
              "_elapsed_steps": "None",
              "$type": "gym.wrappers.time_limit.TimeLimit"
            },
            "_max_episode_length": 200,
            "_render_modes": [
              "human",
              "rgb_array"
            ],
            "_step_cnt": "None",
            "_visualize": false,
            "_action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
              "$type": "akro.box.Box"
            },
            "_observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
              "$type": "akro.box.Box"
            },
            "_spec": {
              "max_episode_length": 200,
              "input_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
                "$type": "akro.box.Box"
              },
              "output_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
                "$type": "akro.box.Box"
              },
              "$type": "garage._environment.EnvSpec"
            },
            "_env_info": "None",
            "$type": "garage.envs.gym_env.GymEnv"
          },
          "_env_steps": [],
          "_observations": [],
          "_last_observations": [],
          "_agent_infos": {},
          "_lengths": [],
          "_prev_obs": "None",
          "_eps_length": 0,
          "_episode_infos": {},
          "$type": "garage.sampler.default_worker.DefaultWorker"
        }
      ],
      "total_env_steps": 0,
      "$type": "garage.sampler.local_sampler.LocalSampler"
    },
    "_policy_optimizer": {
      "_optimizer": {
        "defaults": {},
        "_max_constraint_value": 0.01,
        "_cg_iters": 10,
        "_max_backtracks": 15,
        "_backtrack_ratio": 0.8,
        "_hvp_reg_coeff": 1e-05,
        "_accept_violation": false,
        "param_groups": [
          {
            "params": [
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              }
            ]
          }
        ],
        "$type": "garage.torch.optimizers.conjugate_gradient_optimizer.ConjugateGradientOptimizer"
      },
      "_max_optimization_epochs": 1,
      "_minibatch_size": "None",
      "$type": "garage.torch.optimizers.optimizer_wrapper.OptimizerWrapper"
    },
    "_vf_optimizer": {
      "_optimizer": {
        "defaults": {
          "lr": 0.00025,
          "betas": [
            0.9,
            0.999
          ],
          "eps": 1e-08,
          "weight_decay": 0,
          "amsgrad": false
        },
        "state": {},
        "param_groups": [
          {
            "params": [
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              },
              {
                "$type": "torch.nn.parameter.Parameter"
              }
            ],
            "lr": 0.00025,
            "betas": [
              0.9,
              0.999
            ],
            "eps": 1e-08,
            "weight_decay": 0,
            "amsgrad": false
          }
        ],
        "$type": "torch.optim.adam.Adam"
      },
      "_max_optimization_epochs": 10,
      "_minibatch_size": 64,
      "$type": "garage.torch.optimizers.optimizer_wrapper.OptimizerWrapper"
    },
    "_old_policy": {
      "training": true,
      "_parameters": {},
      "_buffers": {},
      "_non_persistent_buffers_set": [],
      "_backward_hooks": {},
      "_forward_hooks": {},
      "_forward_pre_hooks": {},
      "_state_dict_hooks": {},
      "_load_state_dict_pre_hooks": {},
      "_modules": {
        "_module": {
          "training": true,
          "_parameters": {
            "_init_std": {
              "$type": "torch.nn.parameter.Parameter"
            }
          },
          "_buffers": {
            "min_std_param": {
              "$type": "torch.Tensor"
            }
          },
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_mean_module": {
              "training": true,
              "_parameters": {},
              "_buffers": {},
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 3.0,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    },
                    "1": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 32,
                          "$type": "torch.nn.modules.linear.Linear"
                        },
                        "non_linearity": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                          "$type": "garage.torch._functions.NonLinearity"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                },
                "_output_layers": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "0": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "linear": {
                          "training": true,
                          "_parameters": {
                            "weight": {
                              "$type": "torch.nn.parameter.Parameter"
                            },
                            "bias": {
                              "$type": "torch.nn.parameter.Parameter"
                            }
                          },
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {},
                          "in_features": 32,
                          "out_features": 1.0,
                          "$type": "torch.nn.modules.linear.Linear"
                        }
                      },
                      "$type": "torch.nn.modules.container.Sequential"
                    }
                  },
                  "$type": "torch.nn.modules.container.ModuleList"
                }
              },
              "_output_dim": 1.0,
              "$type": "garage.torch.modules.mlp_module.MLPModule"
            }
          },
          "_input_dim": 3.0,
          "_hidden_sizes": [
            32,
            32
          ],
          "_action_dim": 1.0,
          "_learn_std": true,
          "_std_hidden_sizes": [
            32,
            32
          ],
          "_min_std": 1e-06,
          "_max_std": "None",
          "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
          "_std_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_std_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_std_output_nonlinearity": "None",
          "_std_output_w_init": {
            "$type": "builtins.function"
          },
          "_std_parameterization": "exp",
          "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
          "_hidden_w_init": {
            "$type": "builtins.function"
          },
          "_hidden_b_init": {
            "$type": "builtins.function"
          },
          "_output_nonlinearity": "None",
          "_output_w_init": {
            "$type": "builtins.function"
          },
          "_output_b_init": {
            "$type": "builtins.function"
          },
          "_layer_normalization": false,
          "_norm_dist_class": {
            "$typename": "torch.distributions.normal.Normal"
          },
          "_min_std_param": {
            "$type": "torch.Tensor"
          },
          "_max_std_param": "None",
          "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
        }
      },
      "_env_spec": {
        "max_episode_length": 200,
        "input_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685940",
          "$type": "akro.box.Box"
        },
        "output_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685E40",
          "$type": "akro.box.Box"
        },
        "$type": "garage._environment.EnvSpec"
      },
      "_name": "GaussianMLPPolicy",
      "_obs_dim": 3.0,
      "_action_dim": 1.0,
      "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
    },
    "$type": "garage.torch.algos.trpo.TRPO"
  },
  "_env": {
    "_env": {
      "env": {
        "max_speed": 8,
        "max_torque": 2.0,
        "dt": 0.05,
        "g": 10.0,
        "m": 1.0,
        "l": 1.0,
        "viewer": "None",
        "action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685C40",
          "$type": "gym.spaces.box.Box"
        },
        "observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B685840",
          "$type": "gym.spaces.box.Box"
        },
        "np_random": "RandomState(MT19937) at 0x1D69B685D40",
        "spec": {
          "id": "Pendulum-v0",
          "entry_point": "gym.envs.classic_control:PendulumEnv",
          "reward_threshold": "None",
          "nondeterministic": false,
          "max_episode_steps": 200,
          "_kwargs": {},
          "_env_name": "Pendulum",
          "$type": "gym.envs.registration.EnvSpec"
        },
        "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
      },
      "action_space": {
        "dtype": "dtype('float32')",
        "shape": [
          1
        ],
        "low": "array([-2.], dtype=float32)",
        "high": "array([2.], dtype=float32)",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "np_random": "RandomState(MT19937) at 0x1D69B685C40",
        "$type": "gym.spaces.box.Box"
      },
      "observation_space": {
        "dtype": "dtype('float32')",
        "shape": [
          3
        ],
        "low": "array([-1., -1., -8.], dtype=float32)",
        "high": "array([1., 1., 8.], dtype=float32)",
        "bounded_below": "array([ True,  True,  True])",
        "bounded_above": "array([ True,  True,  True])",
        "np_random": "RandomState(MT19937) at 0x1D69B685840",
        "$type": "gym.spaces.box.Box"
      },
      "reward_range": [
        -Infinity,
        Infinity
      ],
      "metadata": {
        "render.modes": [
          "human",
          "rgb_array"
        ],
        "video.frames_per_second": 30
      },
      "_max_episode_steps": 200,
      "_elapsed_steps": "None",
      "$type": "gym.wrappers.time_limit.TimeLimit"
    },
    "_max_episode_length": 200,
    "_render_modes": [
      "human",
      "rgb_array"
    ],
    "_step_cnt": "None",
    "_visualize": false,
    "_action_space": {
      "dtype": "dtype('float32')",
      "shape": [
        1
      ],
      "low": "array([-2.], dtype=float32)",
      "high": "array([2.], dtype=float32)",
      "bounded_below": "array([ True])",
      "bounded_above": "array([ True])",
      "np_random": "RandomState(MT19937) at 0x1D69B685540",
      "$type": "akro.box.Box"
    },
    "_observation_space": {
      "dtype": "dtype('float32')",
      "shape": [
        3
      ],
      "low": "array([-1., -1., -8.], dtype=float32)",
      "high": "array([1., 1., 8.], dtype=float32)",
      "bounded_below": "array([ True,  True,  True])",
      "bounded_above": "array([ True,  True,  True])",
      "np_random": "RandomState(MT19937) at 0x1D69B685B40",
      "$type": "akro.box.Box"
    },
    "_spec": {
      "max_episode_length": 200,
      "input_space": {
        "dtype": "dtype('float32')",
        "shape": [
          1
        ],
        "low": "array([-2.], dtype=float32)",
        "high": "array([2.], dtype=float32)",
        "bounded_below": "array([ True])",
        "bounded_above": "array([ True])",
        "np_random": "RandomState(MT19937) at 0x1D69B685540",
        "$type": "akro.box.Box"
      },
      "output_space": {
        "dtype": "dtype('float32')",
        "shape": [
          3
        ],
        "low": "array([-1., -1., -8.], dtype=float32)",
        "high": "array([1., 1., 8.], dtype=float32)",
        "bounded_below": "array([ True,  True,  True])",
        "bounded_above": "array([ True,  True,  True])",
        "np_random": "RandomState(MT19937) at 0x1D69B685B40",
        "$type": "akro.box.Box"
      },
      "$type": "garage._environment.EnvSpec"
    },
    "_env_info": "None",
    "$type": "garage.envs.gym_env.GymEnv"
  },
  "_sampler": {
    "_factory": {
      "n_workers": 8,
      "_seed": "None",
      "_max_episode_length": 200,
      "_worker_class": {
        "$typename": "garage.sampler.default_worker.DefaultWorker"
      },
      "_worker_args": {},
      "$type": "garage.sampler.worker_factory.WorkerFactory"
    },
    "_agents": [
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      },
      {
        "training": true,
        "_parameters": {},
        "_buffers": {},
        "_non_persistent_buffers_set": [],
        "_backward_hooks": {},
        "_forward_hooks": {},
        "_forward_pre_hooks": {},
        "_state_dict_hooks": {},
        "_load_state_dict_pre_hooks": {},
        "_modules": {
          "_module": {
            "training": true,
            "_parameters": {
              "_init_std": {
                "$type": "torch.nn.parameter.Parameter"
              }
            },
            "_buffers": {
              "min_std_param": {
                "$type": "torch.Tensor"
              }
            },
            "_non_persistent_buffers_set": [],
            "_backward_hooks": {},
            "_forward_hooks": {},
            "_forward_pre_hooks": {},
            "_state_dict_hooks": {},
            "_load_state_dict_pre_hooks": {},
            "_modules": {
              "_mean_module": {
                "training": true,
                "_parameters": {},
                "_buffers": {},
                "_non_persistent_buffers_set": [],
                "_backward_hooks": {},
                "_forward_hooks": {},
                "_forward_pre_hooks": {},
                "_state_dict_hooks": {},
                "_load_state_dict_pre_hooks": {},
                "_modules": {
                  "_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 3.0,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      },
                      "1": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 32,
                            "$type": "torch.nn.modules.linear.Linear"
                          },
                          "non_linearity": {
                            "training": true,
                            "_parameters": {},
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                            "$type": "garage.torch._functions.NonLinearity"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  },
                  "_output_layers": {
                    "training": true,
                    "_parameters": {},
                    "_buffers": {},
                    "_non_persistent_buffers_set": [],
                    "_backward_hooks": {},
                    "_forward_hooks": {},
                    "_forward_pre_hooks": {},
                    "_state_dict_hooks": {},
                    "_load_state_dict_pre_hooks": {},
                    "_modules": {
                      "0": {
                        "training": true,
                        "_parameters": {},
                        "_buffers": {},
                        "_non_persistent_buffers_set": [],
                        "_backward_hooks": {},
                        "_forward_hooks": {},
                        "_forward_pre_hooks": {},
                        "_state_dict_hooks": {},
                        "_load_state_dict_pre_hooks": {},
                        "_modules": {
                          "linear": {
                            "training": true,
                            "_parameters": {
                              "weight": {
                                "$type": "torch.nn.parameter.Parameter"
                              },
                              "bias": {
                                "$type": "torch.nn.parameter.Parameter"
                              }
                            },
                            "_buffers": {},
                            "_non_persistent_buffers_set": [],
                            "_backward_hooks": {},
                            "_forward_hooks": {},
                            "_forward_pre_hooks": {},
                            "_state_dict_hooks": {},
                            "_load_state_dict_pre_hooks": {},
                            "_modules": {},
                            "in_features": 32,
                            "out_features": 1.0,
                            "$type": "torch.nn.modules.linear.Linear"
                          }
                        },
                        "$type": "torch.nn.modules.container.Sequential"
                      }
                    },
                    "$type": "torch.nn.modules.container.ModuleList"
                  }
                },
                "_output_dim": 1.0,
                "$type": "garage.torch.modules.mlp_module.MLPModule"
              }
            },
            "_input_dim": 3.0,
            "_hidden_sizes": [
              32,
              32
            ],
            "_action_dim": 1.0,
            "_learn_std": true,
            "_std_hidden_sizes": [
              32,
              32
            ],
            "_min_std": 1e-06,
            "_max_std": "None",
            "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_std_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_std_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_std_output_nonlinearity": "None",
            "_std_output_w_init": {
              "$type": "builtins.function"
            },
            "_std_parameterization": "exp",
            "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
            "_hidden_w_init": {
              "$type": "builtins.function"
            },
            "_hidden_b_init": {
              "$type": "builtins.function"
            },
            "_output_nonlinearity": "None",
            "_output_w_init": {
              "$type": "builtins.function"
            },
            "_output_b_init": {
              "$type": "builtins.function"
            },
            "_layer_normalization": false,
            "_norm_dist_class": {
              "$typename": "torch.distributions.normal.Normal"
            },
            "_min_std_param": {
              "$type": "torch.Tensor"
            },
            "_max_std_param": "None",
            "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
          }
        },
        "_env_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B685B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_name": "GaussianMLPPolicy",
        "_obs_dim": 3.0,
        "_action_dim": 1.0,
        "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
      }
    ],
    "_envs": [
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814040",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814140",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B814240",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814040",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814140",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B814540",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B814640",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814640",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814340",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B814740",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814440",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814340",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B814A40",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B814B40",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814A40",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814B40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814940",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814840",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B814C40",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814940",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814840",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814E40",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814D40",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B7FC240",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814E40",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814D40",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B7FC740",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B7FCC40",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B7EC240",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      },
      {
        "_env": {
          "env": {
            "max_speed": 8,
            "max_torque": 2.0,
            "dt": 0.05,
            "g": 10.0,
            "m": 1.0,
            "l": 1.0,
            "viewer": "None",
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
              "$type": "gym.spaces.box.Box"
            },
            "np_random": "RandomState(MT19937) at 0x1D69B7EC740",
            "spec": {
              "id": "Pendulum-v0",
              "entry_point": "gym.envs.classic_control:PendulumEnv",
              "reward_threshold": "None",
              "nondeterministic": false,
              "max_episode_steps": 200,
              "_kwargs": {},
              "_env_name": "Pendulum",
              "$type": "gym.envs.registration.EnvSpec"
            },
            "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
          },
          "action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
            "$type": "gym.spaces.box.Box"
          },
          "observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
            "$type": "gym.spaces.box.Box"
          },
          "reward_range": [
            -Infinity,
            Infinity
          ],
          "metadata": {
            "render.modes": [
              "human",
              "rgb_array"
            ],
            "video.frames_per_second": 30
          },
          "_max_episode_steps": 200,
          "_elapsed_steps": "None",
          "$type": "gym.wrappers.time_limit.TimeLimit"
        },
        "_max_episode_length": 200,
        "_render_modes": [
          "human",
          "rgb_array"
        ],
        "_step_cnt": "None",
        "_visualize": false,
        "_action_space": {
          "dtype": "dtype('float32')",
          "shape": [
            1
          ],
          "low": "array([-2.], dtype=float32)",
          "high": "array([2.], dtype=float32)",
          "bounded_below": "array([ True])",
          "bounded_above": "array([ True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
          "$type": "akro.box.Box"
        },
        "_observation_space": {
          "dtype": "dtype('float32')",
          "shape": [
            3
          ],
          "low": "array([-1., -1., -8.], dtype=float32)",
          "high": "array([1., 1., 8.], dtype=float32)",
          "bounded_below": "array([ True,  True,  True])",
          "bounded_above": "array([ True,  True,  True])",
          "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
          "$type": "akro.box.Box"
        },
        "_spec": {
          "max_episode_length": 200,
          "input_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
            "$type": "akro.box.Box"
          },
          "output_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
            "$type": "akro.box.Box"
          },
          "$type": "garage._environment.EnvSpec"
        },
        "_env_info": "None",
        "$type": "garage.envs.gym_env.GymEnv"
      }
    ],
    "_workers": [
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 0,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814040",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814140",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B814240",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814040",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814140",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814540",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814640",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814640",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 1,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814340",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B814740",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814340",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814A40",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B814B40",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814A40",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 2,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814940",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814840",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B814C40",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814940",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814840",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC040",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC140",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 3,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814E40",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B814D40",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7FC240",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814E40",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B814D40",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC640",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 4,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7FC740",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC340",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCA40",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCB40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 5,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7FCC40",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC940",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FC840",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC040",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC140",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 6,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7EC240",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCE40",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7FCD40",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC640",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      },
      {
        "_seed": "None",
        "_max_episode_length": 200,
        "_worker_number": 7,
        "agent": {
          "training": true,
          "_parameters": {},
          "_buffers": {},
          "_non_persistent_buffers_set": [],
          "_backward_hooks": {},
          "_forward_hooks": {},
          "_forward_pre_hooks": {},
          "_state_dict_hooks": {},
          "_load_state_dict_pre_hooks": {},
          "_modules": {
            "_module": {
              "training": true,
              "_parameters": {
                "_init_std": {
                  "$type": "torch.nn.parameter.Parameter"
                }
              },
              "_buffers": {
                "min_std_param": {
                  "$type": "torch.Tensor"
                }
              },
              "_non_persistent_buffers_set": [],
              "_backward_hooks": {},
              "_forward_hooks": {},
              "_forward_pre_hooks": {},
              "_state_dict_hooks": {},
              "_load_state_dict_pre_hooks": {},
              "_modules": {
                "_mean_module": {
                  "training": true,
                  "_parameters": {},
                  "_buffers": {},
                  "_non_persistent_buffers_set": [],
                  "_backward_hooks": {},
                  "_forward_hooks": {},
                  "_forward_pre_hooks": {},
                  "_state_dict_hooks": {},
                  "_load_state_dict_pre_hooks": {},
                  "_modules": {
                    "_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 3.0,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        },
                        "1": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 32,
                              "$type": "torch.nn.modules.linear.Linear"
                            },
                            "non_linearity": {
                              "training": true,
                              "_parameters": {},
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "module": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
                              "$type": "garage.torch._functions.NonLinearity"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    },
                    "_output_layers": {
                      "training": true,
                      "_parameters": {},
                      "_buffers": {},
                      "_non_persistent_buffers_set": [],
                      "_backward_hooks": {},
                      "_forward_hooks": {},
                      "_forward_pre_hooks": {},
                      "_state_dict_hooks": {},
                      "_load_state_dict_pre_hooks": {},
                      "_modules": {
                        "0": {
                          "training": true,
                          "_parameters": {},
                          "_buffers": {},
                          "_non_persistent_buffers_set": [],
                          "_backward_hooks": {},
                          "_forward_hooks": {},
                          "_forward_pre_hooks": {},
                          "_state_dict_hooks": {},
                          "_load_state_dict_pre_hooks": {},
                          "_modules": {
                            "linear": {
                              "training": true,
                              "_parameters": {
                                "weight": {
                                  "$type": "torch.nn.parameter.Parameter"
                                },
                                "bias": {
                                  "$type": "torch.nn.parameter.Parameter"
                                }
                              },
                              "_buffers": {},
                              "_non_persistent_buffers_set": [],
                              "_backward_hooks": {},
                              "_forward_hooks": {},
                              "_forward_pre_hooks": {},
                              "_state_dict_hooks": {},
                              "_load_state_dict_pre_hooks": {},
                              "_modules": {},
                              "in_features": 32,
                              "out_features": 1.0,
                              "$type": "torch.nn.modules.linear.Linear"
                            }
                          },
                          "$type": "torch.nn.modules.container.Sequential"
                        }
                      },
                      "$type": "torch.nn.modules.container.ModuleList"
                    }
                  },
                  "_output_dim": 1.0,
                  "$type": "garage.torch.modules.mlp_module.MLPModule"
                }
              },
              "_input_dim": 3.0,
              "_hidden_sizes": [
                32,
                32
              ],
              "_action_dim": 1.0,
              "_learn_std": true,
              "_std_hidden_sizes": [
                32,
                32
              ],
              "_min_std": 1e-06,
              "_max_std": "None",
              "_std_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_std_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_std_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_std_output_nonlinearity": "None",
              "_std_output_w_init": {
                "$type": "builtins.function"
              },
              "_std_parameterization": "exp",
              "_hidden_nonlinearity": "<built-in method tanh of type object at 0x00007FFFDFEDD680>",
              "_hidden_w_init": {
                "$type": "builtins.function"
              },
              "_hidden_b_init": {
                "$type": "builtins.function"
              },
              "_output_nonlinearity": "None",
              "_output_w_init": {
                "$type": "builtins.function"
              },
              "_output_b_init": {
                "$type": "builtins.function"
              },
              "_layer_normalization": false,
              "_norm_dist_class": {
                "$typename": "torch.distributions.normal.Normal"
              },
              "_min_std_param": {
                "$type": "torch.Tensor"
              },
              "_max_std_param": "None",
              "$type": "garage.torch.modules.gaussian_mlp_module.GaussianMLPModule"
            }
          },
          "_env_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685540",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B685B40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_name": "GaussianMLPPolicy",
          "_obs_dim": 3.0,
          "_action_dim": 1.0,
          "$type": "garage.torch.policies.gaussian_mlp_policy.GaussianMLPPolicy"
        },
        "env": {
          "_env": {
            "env": {
              "max_speed": 8,
              "max_torque": 2.0,
              "dt": 0.05,
              "g": 10.0,
              "m": 1.0,
              "l": 1.0,
              "viewer": "None",
              "action_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  1
                ],
                "low": "array([-2.], dtype=float32)",
                "high": "array([2.], dtype=float32)",
                "bounded_below": "array([ True])",
                "bounded_above": "array([ True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
                "$type": "gym.spaces.box.Box"
              },
              "observation_space": {
                "dtype": "dtype('float32')",
                "shape": [
                  3
                ],
                "low": "array([-1., -1., -8.], dtype=float32)",
                "high": "array([1., 1., 8.], dtype=float32)",
                "bounded_below": "array([ True,  True,  True])",
                "bounded_above": "array([ True,  True,  True])",
                "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
                "$type": "gym.spaces.box.Box"
              },
              "np_random": "RandomState(MT19937) at 0x1D69B7EC740",
              "spec": {
                "id": "Pendulum-v0",
                "entry_point": "gym.envs.classic_control:PendulumEnv",
                "reward_threshold": "None",
                "nondeterministic": false,
                "max_episode_steps": 200,
                "_kwargs": {},
                "_env_name": "Pendulum",
                "$type": "gym.envs.registration.EnvSpec"
              },
              "$type": "gym.envs.classic_control.pendulum.PendulumEnv"
            },
            "action_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC440",
              "$type": "gym.spaces.box.Box"
            },
            "observation_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7EC340",
              "$type": "gym.spaces.box.Box"
            },
            "reward_range": [
              -Infinity,
              Infinity
            ],
            "metadata": {
              "render.modes": [
                "human",
                "rgb_array"
              ],
              "video.frames_per_second": 30
            },
            "_max_episode_steps": 200,
            "_elapsed_steps": "None",
            "$type": "gym.wrappers.time_limit.TimeLimit"
          },
          "_max_episode_length": 200,
          "_render_modes": [
            "human",
            "rgb_array"
          ],
          "_step_cnt": "None",
          "_visualize": false,
          "_action_space": {
            "dtype": "dtype('float32')",
            "shape": [
              1
            ],
            "low": "array([-2.], dtype=float32)",
            "high": "array([2.], dtype=float32)",
            "bounded_below": "array([ True])",
            "bounded_above": "array([ True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
            "$type": "akro.box.Box"
          },
          "_observation_space": {
            "dtype": "dtype('float32')",
            "shape": [
              3
            ],
            "low": "array([-1., -1., -8.], dtype=float32)",
            "high": "array([1., 1., 8.], dtype=float32)",
            "bounded_below": "array([ True,  True,  True])",
            "bounded_above": "array([ True,  True,  True])",
            "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
            "$type": "akro.box.Box"
          },
          "_spec": {
            "max_episode_length": 200,
            "input_space": {
              "dtype": "dtype('float32')",
              "shape": [
                1
              ],
              "low": "array([-2.], dtype=float32)",
              "high": "array([2.], dtype=float32)",
              "bounded_below": "array([ True])",
              "bounded_above": "array([ True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7ECA40",
              "$type": "akro.box.Box"
            },
            "output_space": {
              "dtype": "dtype('float32')",
              "shape": [
                3
              ],
              "low": "array([-1., -1., -8.], dtype=float32)",
              "high": "array([1., 1., 8.], dtype=float32)",
              "bounded_below": "array([ True,  True,  True])",
              "bounded_above": "array([ True,  True,  True])",
              "np_random": "RandomState(MT19937) at 0x1D69B7ECB40",
              "$type": "akro.box.Box"
            },
            "$type": "garage._environment.EnvSpec"
          },
          "_env_info": "None",
          "$type": "garage.envs.gym_env.GymEnv"
        },
        "_env_steps": [],
        "_observations": [],
        "_last_observations": [],
        "_agent_infos": {},
        "_lengths": [],
        "_prev_obs": "None",
        "_eps_length": 0,
        "_episode_infos": {},
        "$type": "garage.sampler.default_worker.DefaultWorker"
      }
    ],
    "total_env_steps": 0,
    "$type": "garage.sampler.local_sampler.LocalSampler"
  },
  "_plotter": "None",
  "_start_time": "None",
  "_itr_start_time": "None",
  "step_itr": "None",
  "step_episode": "None",
  "enable_logging": true,
  "_n_workers": "None",
  "_worker_class": "None",
  "_worker_args": "None",
  "$type": "garage.trainer.Trainer"
}